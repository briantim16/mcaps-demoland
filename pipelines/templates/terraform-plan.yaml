parameters:
  - name: environment
  - name: serviceConnection

jobs:
- job: TerraformPlan
  displayName: 'Terraform Plan'
  variables:
  - group: ${{parameters.environment}}
  steps:

  - task: TerraformInstaller@1
    name: terraformInstall
    displayName: 'Terraform Install'
    inputs:
      terraformVersion: 'latest'

  - task: TerraformTask@4
    name: terraformInit
    displayName: 'Terraform Init'
    inputs:
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform' # where the Terraform code is at
      provider: 'azurerm'
      command: 'init'
      backendServiceArm: ${{parameters.serviceConnection}}
      backendAzureRmResourceGroupName: $(backendResourceGroupName)
      backendAzureRmStorageAccountName: $(backendStorageAccountName)
      backendAzureRmContainerName: $(backendContainerName)
      backendAzureRmKey: $(backendKey)
      backendAzureRmUseEntraIdForAuthentication: true

  - task: TerraformTask@4
    name: terraformValidate
    displayName: 'Terraform Validate'  
    inputs:
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      provider: 'azurerm'
      command: 'validate'

  - task: TerraformTask@4
    name: terraformPlan
    displayName: 'Terraform Plan'  
    inputs:
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      provider: 'azurerm'
      command: 'plan'
      environmentServiceNameAzureRM: ${{parameters.serviceConnection}}
      commandOptions: '-out tfplan -var-file=$(variablesFile)'
  
  - script: |
      echo $(terraformPlan.changesPresent)
    displayName: 'Is Terraform Plan Changes Present'

  - script: |
      echo "##vso[task.setvariable variable=changesPresent;isOutput=true]variables['terraformPlan.changesPresent']"
    displayName: 'Set Output Variable'

  - task: PublishPipelineArtifact@1
    condition: eq(variables['terraformPlan.changesPresent'], 'true')
    inputs:
      targetPath: $(System.DefaultWorkingDirectory)/terraform/tfplan
      artifactName: 'tfplan.${{parameters.environment}}'